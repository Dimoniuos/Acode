from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
import logging
import asyncio
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from re import match
from dotenv import load_dotenv
import os
import Notifications
from payment import create, check_payment
import server
from Partners import Partners
from server import list_active_users, get_expiration_dates_sl, get_connection_string

load_dotenv()
from py3xui import AsyncApi
api = AsyncApi(host=os.getenv("panel_host"), username=os.getenv("panel_login"), password=os.getenv("panel_password"))
from DataSet import UsersData, Refferals, Price, AllRefferals

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv("bot_token"))
dp = Dispatcher()
refferal = Refferals()
users = UsersData()
price = Price()
partners = Partners()
AllRefferals = AllRefferals()
admin_id = os.getenv("admin_id")
router = Router()
dp.include_router(router)

class Emails(StatesGroup):
    Email = State()


@dp.message(Command("start"))
async def start(message: Message):
    if not refferal.Exist(message.from_user.id):
        username = "@"
        if message.from_user.username:
            username += message.from_user.username
        users.insert_user(message.from_user.id, None, username, False)
        if " " in message.text:
            mes, ref = message.text.split()
            refferal.insert_user(message.from_user.id, username, ref, 0)
            AllRefferals.insert_user(message.from_user.id, ref)
            if "P" in message.text:
                partners.update_started(message.text.replace("/start ", ""))
        else:
            refferal.insert_user(message.from_user.id, username, 0, 0)
            AllRefferals.insert_user(message.from_user.id, "")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", url="https://telegra.ph/Instrukciya-po-podklyucheniyu-VPN-04-30-4"))
    if str(message.from_user.id) not in list_active_users(await api.inbound.get_by_id(1)):
        builder.row(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É", callback_data="my_sub"))
    else:
        builder.row(InlineKeyboardButton(text="–ú–æ—è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="my_sub"))
    builder.row(InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞", callback_data="refferalsistem"))
    builder.row(InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤—É–µ–º! –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "help")
async def help(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.edit_text(
        "–ó–∞–¥–∞–π—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å @AcodeHelper"
    )

@dp.callback_query(F.data=="my_sub")
async def my_sub(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.delete()
    id = str(call.from_user.id)
    if id in list_active_users(await api.inbound.get_by_id(1)):
        times = get_expiration_dates_sl(await api.inbound.get_by_id(1))[id]
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ú–æ–π VPN-–∫–ª—é—á", callback_data="my_key"))
        if times[0] < 60:
            builder.row(InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"))
        await call.message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {times[0]} –¥–Ω—è(-–µ–π) {times[1]} —á–∞—Å–∞(-–æ–≤)", reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"))
        await call.message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "refferalsistem")
async def refferalls(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    await call.message.delete()
    id = str(call.from_user.id)
    if partners.Exist(id)[0]:
        data = partners.get_statistics(id)
        ans = ""
        if data:
            for i in data:
                ans += f"–°—Å—ã–ª–∫–∞: t.me/@acodevpnbot?start={i[0]}\n–ù–∞–∂–∞–ª–æ Start: {i[2]}\n–°–æ–≤–µ—Ä—à–∏–ª–æ –ø–æ–∫—É–ø–∫—É: {i[3]}\n\n"
        else:
            ans = "–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="New_link"))
        await call.message.answer(ans, reply_markup=builder.as_markup())
    else:
        await call.message.answer(f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É! \n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                              f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 100%"
                              f"\n\n–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {refferal.get_sale(call.from_user.id)}%\n\n"
                              f"–í–∞—à–∞ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/@acodevpnbot?start={id}\n\n"
                              f"–ï—Å–ª–∏ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ–ª—å—à–µ 10 –¥—Ä—É–∑–µ–π, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @AcodeHelper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")



@dp.callback_query(F.data == "New_link")
async def new_link(call: CallbackQuery):
    id = str(call.from_user.id)
    await bot.answer_callback_query(call.id)
    link = f"{id}P{len(partners.get_statistics(id)) + 1}"
    partners.insert(link, id)
    await call.message.answer("–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\nt.me/@acodebot?start="+link)



@dp.callback_query(F.data=="my_key")
async def my_key(call: CallbackQuery):
    id = str(call.from_user.id)
    await bot.answer_callback_query(call.id)
    #await call.message.delete()
    if id in list_active_users(await api.inbound.get_by_id(1)):
        key = get_connection_string(await api.inbound.get_by_id(1), id)
        await call.message.edit_text(f'–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n<code>{key}</code>', parse_mode="html")
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"))
        await call.message.edit_text(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", reply_markup=builder.as_markup())


@dp.callback_query(F.data=="buy")
async def my_sub(call: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    await call.message.delete()
    sale = refferal.get_sale(call.from_user.id)
    if sale == 100:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data="buy_for_zero"))
        await call.message.answer('–ê–∫—Ç–∏–≤–∞—Ü–∏—è Acode Premium –Ω–∞ 30 –¥–Ω–µ–π –∑–∞ 0‚ÇΩ\n\n–õ–æ–∫–∞—Ü–∏—è: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://telegra.ph/POLZOVATELSKOE-SOGLASHENIE-05-01-9">–£—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>', reply_markup=builder.as_markup(), parse_mode="html", disable_web_page_preview=True)
    else:
        email = users.get_email(call.from_user.id)
        if email == None:
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞. –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑")
            await state.set_state(Emails.Email)
        else:
            await start_payment(call.message, call.from_user.id)

@router.message(Emails.Email)
async def _email(message: Message, state: FSMContext):
    mail = message.text
    EMAIL_REGEX = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if not match(EMAIL_REGEX, mail):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.set_state(None)
    users.update_email(message.from_user.id, mail)
    await start_payment(message, message.from_user.id)



async def start_payment(message: Message, id):
    sale = refferal.get_sale(id)
    email = users.get_email(id)
    builder = InlineKeyboardBuilder()
    cost = price.get_price()
    pay = create(email, cost - cost * sale / 100)
    builder.row(InlineKeyboardButton(text=f"O–ø–ª–∞—Ç–∏—Ç—å {cost - cost * sale / 100 :.2f}‚ÇΩ", url=pay[0]))
    await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ Acode VPN –Ω–∞ 30 –¥–Ω–µ–π\n\n–õ–æ–∫–∞—Ü–∏—è: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="https://telegra.ph/POLZOVATELSKOE-SOGLASHENIE-05-01-9">–£—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>', reply_markup=builder.as_markup(), parse_mode="html", disable_web_page_preview=True)
    await asyncio.create_task(check_payment(id, pay[1], bot, api))


@dp.callback_query(F.data == "buy_for_zero")
async def succe(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    id = str(call.from_user.id)
    if id not in list_active_users(await api.inbound.get_by_id(1)):
        await server.prolong_subscriptions(id, api, 30, await api.inbound.get_by_id(1))
        key = get_connection_string(await api.inbound.get_by_id(1), id)
        await call.message.answer(f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! \n\n–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n<code>{key}</code>', parse_mode="html")
        users.update_user(id, True)
        refferal.update_sale(id)
        refferal.null_sale(id)
    else:
        await server.prolong_subscriptions(id, api, 30, await api.inbound.get_by_id(1))
        key = get_connection_string(await api.inbound.get_by_id(1), id)
        await call.message.answer(f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! \n\n–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n<code>{key}</code>', parse_mode="html")
        users.update_user(id, True)
        refferal.null_sale(id)


@router.message(F.photo | F.text,  StateFilter(None))
async def admin_post_all(message: Message):
    if message.from_user.id != int(admin_id):
        return
    if not (message.text or message.caption):
        return
    raw_text = message.caption if message.caption else message.text
    if "/Admin" == raw_text.strip():
        pass
    if "/admin_post_all" in raw_text:
        text = raw_text.replace("/admin_post_all", "").strip()
        image = message.photo[-1].file_id if message.photo else None
        userlist = users.UsersList()
        for user_id in userlist:
            if image:
                await bot.send_photo(chat_id=user_id, photo=image, caption=text)
            else:
                await bot.send_message(chat_id=user_id, text=text)
    elif "/admin_post_person" in raw_text:
        text = raw_text.replace("/admin_post_person", "").strip()
        back = text.find(" ")
        user = int(text[0:back])
        text = text[back:]
        image = message.photo[-1].file_id if message.photo else None
        if image:
            await bot.send_photo(chat_id=user, photo=image, caption=text)
        else:
            await bot.send_message(chat_id=user, text=text)
    elif "/referral_file" in raw_text:
        refferal.get_table()
        await message.answer_document(types.FSInputFile("Refferals.csv"))
    elif "/users_file" in raw_text:
        users.get_table()
        await message.answer_document(types.FSInputFile("Users.csv"))
    elif "/set_price" in raw_text:
        new_price = int(raw_text.replace("/set_price", "").strip())
        price.update_price(new_price)
    elif "/new_partner" in raw_text:
        new_partner = int(raw_text.replace("/new_partner", "").strip())
        users.update_partner(new_partner, True)




async def main():
    await api.login()
    task = asyncio.create_task(Notifications.notification(bot, api))
    await dp.start_polling(bot)
    await task




if __name__ == '__main__':
    asyncio.run(main())





